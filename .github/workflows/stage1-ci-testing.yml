name: Stage 1 CI Pipeline - Test and Push Images to ACR

# Trigger: push to 'testing' branch only
on:
  push:
    branches: [ testing ]

env:
  PYTHON_VERSION: '3.11'
  ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}
  IMAGE_TAG: latest

jobs:
  test-services:
    name: Run unit tests for all services
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: products
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres" 
          --health-interval 10s 
          --health-timeout 5s 
          --health-retries 5

    strategy:
      fail-fast: false
      matrix:
        service: [ product_service, order_service, customer_service ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies for ${{ matrix.service }}
        working-directory: backend/${{ matrix.service }}
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Wait for Postgres to be healthy
        run: |
          for i in {1..20}; do
            if docker ps --format '{{.Names}}' | grep -q "postgres" &&
               pg_isready -h 127.0.0.1 -p 5432 -U postgres; then
              echo "Postgres is ready"; break; fi; echo "Waiting for Postgres..."; sleep 3; done

      - name: Set test database env vars per service
        run: |
          case "${{ matrix.service }}" in
            product_service)
              echo "POSTGRES_DB=products" >> $GITHUB_ENV
              ;;
            order_service)
              echo "POSTGRES_DB=orders" >> $GITHUB_ENV
              ;;
            customer_service)
              echo "POSTGRES_DB=customers" >> $GITHUB_ENV
              ;;
          esac
          echo "POSTGRES_USER=postgres" >> $GITHUB_ENV
          echo "POSTGRES_PASSWORD=postgres" >> $GITHUB_ENV
          echo "POSTGRES_HOST=127.0.0.1" >> $GITHUB_ENV
          echo "POSTGRES_PORT=5432" >> $GITHUB_ENV

      - name: Run tests for ${{ matrix.service }}
        working-directory: backend/${{ matrix.service }}
        env:
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_HOST: ${{ env.POSTGRES_HOST }}
          POSTGRES_PORT: ${{ env.POSTGRES_PORT }}
        run: |
          pytest -q

  build-and-push:
    name: Build and push Docker images to ACR
    runs-on: ubuntu-latest
    needs: test-services
    if: ${{ needs.test-services.result == 'success' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to ACR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.ACR_LOGIN_SERVER }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Build and push product_service image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: backend/product_service/Dockerfile
          push: true
          tags: |
            ${{ env.ACR_LOGIN_SERVER }}/product_service:${{ env.IMAGE_TAG }}

      - name: Build and push order_service image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: backend/order_service/Dockerfile
          push: true
          tags: |
            ${{ env.ACR_LOGIN_SERVER }}/order_service:${{ env.IMAGE_TAG }}

      - name: Build and push customer_service image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: backend/customer_service/Dockerfile
          push: true
          tags: |
            ${{ env.ACR_LOGIN_SERVER }}/customer_service:${{ env.IMAGE_TAG }}

      - name: Build and push frontend image
        uses: docker/build-push-action@v6
        with:
          context: frontend
          file: frontend/Dockerfile
          push: true
          tags: |
            ${{ env.ACR_LOGIN_SERVER }}/frontend:${{ env.IMAGE_TAG }}



